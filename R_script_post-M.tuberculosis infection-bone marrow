
# Load required libraries
library(celldex)
library(Seurat)
library(Matrix)

# Load the ImmGen reference dataset
ref <- celldex::ImmGenData()
ref_genes <- rownames(ref)
if (length(ref_genes) == 0) {
  stop("Reference dataset does not contain gene names.")
}

# Define the path to your files
data_dir <- "scRNAseq2/"

# Read the matrix file
control_matrix <- readMM(file.path(data_dir, "GSM5365325_CTL_matrix.mtx.gz")) #change this to bone marrow samples from the traatment groups 

# Read the barcodes and features
control_barcodes <- readLines(file.path(data_dir, "GSM5365325_CTL_barcodes.tsv.gz"))
control_features <- readLines(file.path(data_dir, "GSM5365325_CTL_features.tsv"))

# Split the character vector by tabs
split_features <- strsplit(control_features, "\t")

# Convert the list of split elements into a data frame
features_df <- do.call(rbind, split_features)
features_df <- as.data.frame(features_df, stringsAsFactors = FALSE)

# Assign column names for clarity (adjust the names as needed)
colnames(features_df) <- c("ID", "GeneSymbol", "Description")

# Check the structure of the resulting data frame
str(features_df)

# Extract gene symbols from the second column
control_gene_symbols <- features_df$GeneSymbol

# Print the gene symbols to verify
print(control_gene_symbols)

# Convert barcodes and gene symbols to proper format
colnames(control_matrix) <- control_barcodes
rownames(control_matrix) <- control_gene_symbols

# Make row names unique by appending a suffix
rownames(control_matrix) <- make.unique(rownames(control_matrix))

# Verify that all row names are now unique
print(any(duplicated(rownames(control_matrix))))

# Create a Seurat object
control_seurat_object <- CreateSeuratObject(counts = control_matrix, project = "scRNAseq", min.cells = 3, min.features = 200)

# Normalize the data
control_seurat_object <- NormalizeData(control_seurat_object)

# Find variable features
control_seurat_object <- FindVariableFeatures(control_seurat_object, selection.method = "vst", nfeatures = 2000)

# Scale the data
control_seurat_object <- ScaleData(control_seurat_object, features = rownames(control_seurat_object))

# Perform PCA
control_seurat_object <- RunPCA(control_seurat_object, features = VariableFeatures(object = control_seurat_object))

# Find neighbors
control_seurat_object <- FindNeighbors(control_seurat_object, dims = 1:10)

# Cluster the cells
control_seurat_object <- FindClusters(control_seurat_object, resolution = 0.5)

# Run UMAP for visualization
control_seurat_object <- RunUMAP(control_seurat_object, dims = 1:10)

# Find markers for each cluster
control_markers <- FindAllMarkers(control_seurat_object, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)

# Extract the top 10 markers for each cluster
library(dplyr)
top10_markers <- control_markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)

# Write the top 10 markers to a CSV file
write.csv(top10_markers, "path/to/your/directory/top10_markers.csv", row.names = FALSE)

# Run UMAP for visualization
control_seurat_object <- RunUMAP(control_seurat_object, dims = 1:10)
DimPlot(control_seurat_object, reduction = "umap", label = TRUE) + NoLegend() + ggtitle("Control Bone Marrow_WOAnnotation")


###Automatic addtion of annotation

# Extract gene symbols from test genes
test_genes <- rownames(control_seurat_object)
ref_genes <- toupper(ref_genes)

# Find common genes
common_genes <- intersect(test_genes, ref_genes)
if (length(common_genes) == 0) {
  stop("No common genes found between test and reference datasets.")
} else {
  print(paste(length(common_genes), "common genes found."))
}

# Subset the Seurat object and reference data to the common genes
counts <- GetAssayData(control_seurat_object, slot = "counts")[rownames(control_seurat_object) %in% common_genes, ]
ref <- ref[rownames(ref) %in% common_genes, , drop = FALSE]
common_genes <- intersect(rownames(counts), rownames(ref))
counts <- counts[common_genes, ]
ref <- ref[common_genes, , drop = FALSE]

# Extract cluster labels
clusters <- Idents(control_seurat_object)

# Perform SingleR annotation
singleR_results <- SingleR(test = counts, ref = ref, labels = ref$label.main, clusters = clusters)

# Create a named vector of SingleR annotations
cluster_annotations <- singleR_results$labels
names(cluster_annotations) <- levels(Idents(control_seurat_object))

# Rename the identities in the Seurat object using the named vector
control_seurat_object <- RenameIdents(control_seurat_object, cluster_annotations)

# Plot UMAP with annotations
DimPlot(control_seurat_object, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend() + ggtitle("Control Bone Marrow_Annotated")

# Save the Seurat object
saveRDS(control_seurat_object, file = "annotated_control_seurat_object.rds")

# Export cluster annotations
write.csv(Idents(seurat_object), file = "cluster_annotations.csv")

### NOW STUDY THE NEUTROPHILS SUBCLUSTER

# Subset the Neutrophil cluster
control_neutrophils <- subset(control_seurat_object, idents = "Neutrophils")

# Normalize the subset data
control_neutrophils <- NormalizeData(control_neutrophils)

# Find variable features in the subset
control_neutrophils <- FindVariableFeatures(control_neutrophils, selection.method = "vst", nfeatures = 2000)

# Scale the subset data
control_neutrophils <- ScaleData(control_neutrophils, features = rownames(control_neutrophils))

# Perform PCA on the subset
control_neutrophils <- RunPCA(control_neutrophils, features = VariableFeatures(object = control_neutrophils))

# Find neighbors in the subset
control_neutrophils <- FindNeighbors(control_neutrophils, dims = 1:10)

# Cluster the subset
control_neutrophils <- FindClusters(control_neutrophils, resolution = 0.5)

# Run UMAP for the subset
control_neutrophils <- RunUMAP(control_neutrophils, dims = 1:10)

# Plot UMAP for neutrophil subclusters
DimPlot(control_neutrophils, reduction = "umap", label = TRUE, label.size = 5) + 
  ggtitle("Control Neutrophil Subclusters")

# Find markers for each neutrophil subcluster
control_neutrophil_markers <- FindAllMarkers(control_neutrophils, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)

# Extract the top 10 markers for each subcluster
top10_control_neutrophil_markers <- control_neutrophil_markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)


# Write the top 10 markers for neutrophil subclusters to a CSV file
write.csv(top10_control_neutrophil_markers, "scRNAseq2/top10_neutrophil_markers.csv", row.names = FALSE)

# Draw a heatmap of the top markers for neutrophil subclusters
DoHeatmap(control_neutrophils, features = top10_control_neutrophil_markers$gene) + 
  ggtitle("Heatmap of Top Markers for Control Neutrophil Subclusters")

# Convert gene symbols to Entrez IDs
gene_symbols <- top10_control_neutrophil_markers$gene
gene_entrez_ids <- bitr(gene_symbols, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Mm.eg.db)

# Merge with top10_control_neutrophil_markers to ensure we have cluster information
top10_control_neutrophil_markers <- merge(top10_control_neutrophil_markers, gene_entrez_ids, by.x = "gene", by.y = "SYMBOL")

go_results_list <- list()

for (cluster in unique(top10_control_neutrophil_markers$cluster)) {
  cluster_genes <- top10_control_neutrophil_markers %>% filter(cluster == !!cluster) %>% pull(ENTREZID)
  
  go_results <- enrichGO(
    gene = cluster_genes,
    OrgDb = org.Mm.eg.db,
    keyType = "ENTREZID",
    ont = "BP",  # BP: Biological Process, CC: Cellular Component, MF: Molecular Function
    pAdjustMethod = "BH",
    pvalueCutoff = 0.05,
    qvalueCutoff = 0.2
  )
  
  go_results_list[[as.character(cluster)]] <- go_results
}

library(ggplot2)

for (cluster in names(go_results_list)) {
  go_results <- go_results_list[[cluster]]
  
  if (!is.null(go_results) && nrow(as.data.frame(go_results)) > 0) {
    print(barplot(go_results, showCategory = 10) + ggtitle(paste("GO Enrichment for Subcluster", cluster)))
  }
}

##### Move on to subset HSC

# Subset Stem cells
control_stem_cells <- subset(control_seurat_object, idents = "Stem cells")

# Normalize the data
control_stem_cells <- NormalizeData(control_stem_cells)

# Identify the most variable features
control_stem_cells <- FindVariableFeatures(control_stem_cells)

# Scale the data
control_stem_cells <- ScaleData(control_stem_cells)

# Perform PCA
control_stem_cells <- RunPCA(control_stem_cells)

# Perform UMAP dimensional reduction
control_stem_cells <- RunUMAP(control_stem_cells, dims = 1:10)

# Identify subclusters within Stem cells
control_stem_cells <- FindClusters(control_stem_cells, resolution = 0.5)  # Adjust resolution as needed

# Find markers for each subcluster
stem_cell_markers <- FindAllMarkers(control_stem_cells, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)

# Extract the top 10 markers for each subcluster
top10_stem_cell_markers <- stem_cell_markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)

# Draw UMAP plot
DimPlot(control_stem_cells, reduction = "umap", label = TRUE, pt.size = 0.5) + ggtitle("UMAP of Control HSCs")

# Draw Heatmap
top10_genes <- unique(top10_stem_cell_markers$gene)
DoHeatmap(control_stem_cells, features = top10_genes) + ggtitle("Heatmap of Top 10 Markers per Control HSC Subcluster")


# Convert gene symbols to Entrez IDs
gene_symbols <- top10_stem_cell_markers$gene
gene_entrez_ids <- bitr(gene_symbols, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Mm.eg.db)

# Merge with top10_stem_cell_markers to ensure we have cluster information
top10_stem_cell_markers <- merge(top10_stem_cell_markers, gene_entrez_ids, by.x = "gene", by.y = "SYMBOL", all.x = TRUE)

# Rename ENTREZID column to avoid confusion
colnames(top10_stem_cell_markers)[which(colnames(top10_stem_cell_markers) == "ENTREZID.y")] <- "ENTREZID"

# Remove rows with NA values in the ENTREZID column
top10_stem_cell_markers <- top10_stem_cell_markers %>% filter(!is.na(ENTREZID))

# Perform GO enrichment analysis for each subcluster
go_results_list <- list()

for (cluster in unique(top10_stem_cell_markers$cluster)) {
  cluster_genes <- top10_stem_cell_markers %>% filter(cluster == !!cluster) %>% pull(ENTREZID)
  
  go_results <- enrichGO(
    gene = cluster_genes,
    OrgDb = org.Mm.eg.db,
    keyType = "ENTREZID",
    ont = "BP",  # BP: Biological Process, CC: Cellular Component, MF: Molecular Function
    pAdjustMethod = "BH",
    pvalueCutoff = 0.05,
    qvalueCutoff = 0.2
  )
  
  go_results_list[[as.character(cluster)]] <- go_results
}

# Visualize GO enrichment results
for (cluster in names(go_results_list)) {
  go_results <- go_results_list[[cluster]]
  
  if (!is.null(go_results) && nrow(as.data.frame(go_results)) > 0) {
    print(barplot(go_results, showCategory = 10) + ggtitle(paste("GO Enrichment for Subcluster", cluster)))
  }
}



############################
#Then I want to compare the neutrophils and stem cells in control group vs treatment group (aerosol infection by M. tuberculosis HN878) 

# Add metadata to indicate the condition
control_neutrophils$condition <- "control"
HNifc_neutrophils$condition <- "HNifc"

# Merge the control and HNifc neutrophils into one combined object
neutrophils_combined <- merge(control_neutrophils, y = HNifc_neutrophils, add.cell.ids = c("control", "HNifc"))

# Normalize the data
neutrophils_combined <- NormalizeData(neutrophils_combined)

# Find variable features
neutrophils_combined <- FindVariableFeatures(neutrophils_combined)

# Scale the data
neutrophils_combined <- ScaleData(neutrophils_combined)

# Perform PCA
neutrophils_combined <- RunPCA(neutrophils_combined)

# Perform UMAP for visualization
neutrophils_combined <- RunUMAP(neutrophils_combined, dims = 1:20)

# Find clusters
neutrophils_combined <- FindNeighbors(neutrophils_combined, dims = 1:20)
neutrophils_combined <- FindClusters(neutrophils_combined)

# Join data layers
neutrophils_combined <- JoinLayers(neutrophils_combined)

# UMAP plot colored by condition
DimPlot(neutrophils_combined, reduction = "umap", group.by = "condition")

# Perform DE analysis on neutrophils
de_genes_neutrophils <- FindMarkers(neutrophils_combined, ident.1 = "control", ident.2 = "HNifc", group.by = "condition")

# View the top differentially expressed genes
head(de_genes_neutrophils)

## now for visualization 
# Create a volcano plot
EnhancedVolcano(de_genes_neutrophils,
                lab = rownames(de_genes_neutrophils),
                x = 'avg_log2FC',
                y = 'p_val_adj',
                title = 'Differential Expression of Neutrophils',
                pCutoff = 0.05,
                FCcutoff = 0.25,
                pointSize = 3.0,
                labSize = 3.5)

# Select top 20 DE genes based on adjusted p-value
top_genes <- head(rownames(de_genes_neutrophils[order(de_genes_neutrophils$p_val_adj), ]), 20)

# Extract normalized expression data for the top DE genes
expr_data <- FetchData(neutrophils_combined, vars = top_genes)

# Add condition metadata
expr_data$condition <- neutrophils_combined$condition

# Create a heatmap
pheatmap(t(expr_data[, -ncol(expr_data)]), 
         cluster_rows = TRUE, 
         cluster_cols = TRUE, 
         annotation_col = data.frame(condition = expr_data$condition))


#### NOW compare HSCs

# Add metadata to indicate the condition
control_stem_cells$condition <- "control"
HNifc_stem_cells$condition <- "HNifc"

# Merge the control and HNifc neutrophils into one combined object
HSC_combined <- merge(control_stem_cells, y = HNifc_stem_cells, add.cell.ids = c("control", "HNifc"))

# Normalize the data
HSC_combined <- NormalizeData(HSC_combined)

# Find variable features
HSC_combined <- FindVariableFeatures(HSC_combined)

# Scale the data
HSC_combined <- ScaleData(HSC_combined)

# Perform PCA
HSC_combined <- RunPCA(HSC_combined)

# Perform UMAP for visualization
HSC_combined <- RunUMAP(HSC_combined, dims = 1:20)

# Find clusters
HSC_combined <- FindNeighbors(HSC_combined, dims = 1:20)
HSC_combined <- FindClusters(HSC_combined)

# Join data layers
HSC_combined <- JoinLayers(HSC_combined)

# UMAP plot colored by condition
DimPlot(HSC_combined, reduction = "umap", group.by = "condition")

# Perform DE analysis on neutrophils
de_genes_HSC <- FindMarkers(HSC_combined, ident.1 = "control", ident.2 = "HNifc", group.by = "condition")

# View the top differentially expressed genes
head(de_genes_HSC)

## now for visualization 
# Create a volcano plot
EnhancedVolcano(de_genes_HSC,
                lab = rownames(de_genes_HSC),
                x = 'avg_log2FC',
                y = 'p_val_adj',
                title = 'Differential Expression of HNifc vs Control HSC',
                pCutoff = 0.05,
                FCcutoff = 0.25,
                pointSize = 3.0,
                labSize = 3.5)

# Select top 20 DE genes based on adjusted p-value
top_genes <- head(rownames(de_genes_HSC[order(de_genes_HSC$p_val_adj), ]), 20)

# Extract normalized expression data for the top DE genes
expr_data <- FetchData(HSC_combined, vars = top_genes)

# Add condition metadata
expr_data$condition <- HSC_combined$condition

# Create a heatmap
pheatmap(t(expr_data[, -ncol(expr_data)]), 
         cluster_rows = TRUE, 
         cluster_cols = TRUE, 
         annotation_col = data.frame(condition = expr_data$condition))


# Extract DE genes
de_genes <- rownames(de_genes_HSC[de_genes_HSC$p_val_adj < 0.05, ])

# Convert gene symbols to Entrez IDs
entrez_ids <- bitr(de_genes, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Mm.eg.db)

# Perform GO enrichment analysis
go_results <- enrichGO(gene = entrez_ids$ENTREZID,
                       OrgDb = org.Mm.eg.db,
                       keyType = "ENTREZID",
                       ont = "BP", # Biological Process
                       pAdjustMethod = "BH",
                       pvalueCutoff = 0.05,
                       qvalueCutoff = 0.05)

# View GO results
head(go_results)

# Dotplot for GO enrichment results
dotplot(go_results, showCategory = 8) +
  ggtitle("GO Enrichment Analysis for DE Genes: HNifc vs Control HSCs")




